<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace BitFields
{
<#
var baseType = "byte";

for (var i = 1; i <= 64; i++)
{
    if (i == 9) baseType = "ushort";
    else if (i == 17) baseType = "uint";
    else if (i == 33) baseType = "ulong";

#>
    public struct Bit<#= i #> : IEquatable<Bit<#= i #>>
    {
        public <#= baseType #> Value;
        public Bit<#= i #> (<#= baseType #>  x) => Value = x;

        public bool Equals(Bit<#= i #> other) => Value == other.Value;
        public override bool Equals(object obj) => obj is Bit<#= i #> other && Equals(other);
        public override int GetHashCode() => Value.GetHashCode();
        public static bool operator ==(Bit<#= i #> x, Bit<#= i #> y) => x.Value == y.Value;
        public static bool operator !=(Bit<#= i #> x, Bit<#= i #> y) => x.Value != y.Value;

        public static implicit operator Bit<#= i #>(<#= baseType #> x) => new Bit<#= i #>(x);
        public static implicit operator <#= baseType #>(Bit<#= i #> x) => x.Value;

        public override string ToString() => Value.ToString();
    }
<#
}
#>
}
